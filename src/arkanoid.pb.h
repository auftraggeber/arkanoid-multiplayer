// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arkanoid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_arkanoid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_arkanoid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arkanoid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_arkanoid_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_arkanoid_2eproto;
class Ball;
class BallDefaultTypeInternal;
extern BallDefaultTypeInternal _Ball_default_instance_;
class Brick;
class BrickDefaultTypeInternal;
extern BrickDefaultTypeInternal _Brick_default_instance_;
class ElementPosition;
class ElementPositionDefaultTypeInternal;
extern ElementPositionDefaultTypeInternal _ElementPosition_default_instance_;
class GameElement;
class GameElementDefaultTypeInternal;
extern GameElementDefaultTypeInternal _GameElement_default_instance_;
class GameUpdate;
class GameUpdateDefaultTypeInternal;
extern GameUpdateDefaultTypeInternal _GameUpdate_default_instance_;
class Paddle;
class PaddleDefaultTypeInternal;
extern PaddleDefaultTypeInternal _Paddle_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Ball* Arena::CreateMaybeMessage<::Ball>(Arena*);
template<> ::Brick* Arena::CreateMaybeMessage<::Brick>(Arena*);
template<> ::ElementPosition* Arena::CreateMaybeMessage<::ElementPosition>(Arena*);
template<> ::GameElement* Arena::CreateMaybeMessage<::GameElement>(Arena*);
template<> ::GameUpdate* Arena::CreateMaybeMessage<::GameUpdate>(Arena*);
template<> ::Paddle* Arena::CreateMaybeMessage<::Paddle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ElementType : int {
  BALL = 0,
  PADDLE = 1,
  BRICK = 2,
  ElementType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ElementType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ElementType_IsValid(int value);
constexpr ElementType ElementType_MIN = BALL;
constexpr ElementType ElementType_MAX = BRICK;
constexpr int ElementType_ARRAYSIZE = ElementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementType_descriptor();
template<typename T>
inline const std::string& ElementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ElementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ElementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ElementType_descriptor(), enum_t_value);
}
inline bool ElementType_Parse(
    const std::string& name, ElementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ElementType>(
    ElementType_descriptor(), name, value);
}
// ===================================================================

class Ball PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ball) */ {
 public:
  inline Ball() : Ball(nullptr) {};
  virtual ~Ball();

  Ball(const Ball& from);
  Ball(Ball&& from) noexcept
    : Ball() {
    *this = ::std::move(from);
  }

  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ball& operator=(Ball&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ball& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ball* internal_default_instance() {
    return reinterpret_cast<const Ball*>(
               &_Ball_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ball& a, Ball& b) {
    a.Swap(&b);
  }
  inline void Swap(Ball* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ball* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ball* New() const final {
    return CreateMaybeMessage<Ball>(nullptr);
  }

  Ball* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ball>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ball* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ball";
  }
  protected:
  explicit Ball(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arkanoid_2eproto);
    return ::descriptor_table_arkanoid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityXFieldNumber = 1,
    kVelocityYFieldNumber = 2,
  };
  // float velocity_x = 1;
  void clear_velocity_x();
  float velocity_x() const;
  void set_velocity_x(float value);
  private:
  float _internal_velocity_x() const;
  void _internal_set_velocity_x(float value);
  public:

  // float velocity_y = 2;
  void clear_velocity_y();
  float velocity_y() const;
  void set_velocity_y(float value);
  private:
  float _internal_velocity_y() const;
  void _internal_set_velocity_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Ball)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float velocity_x_;
  float velocity_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arkanoid_2eproto;
};
// -------------------------------------------------------------------

class Paddle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Paddle) */ {
 public:
  inline Paddle() : Paddle(nullptr) {};
  virtual ~Paddle();

  Paddle(const Paddle& from);
  Paddle(Paddle&& from) noexcept
    : Paddle() {
    *this = ::std::move(from);
  }

  inline Paddle& operator=(const Paddle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Paddle& operator=(Paddle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Paddle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Paddle* internal_default_instance() {
    return reinterpret_cast<const Paddle*>(
               &_Paddle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Paddle& a, Paddle& b) {
    a.Swap(&b);
  }
  inline void Swap(Paddle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Paddle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Paddle* New() const final {
    return CreateMaybeMessage<Paddle>(nullptr);
  }

  Paddle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Paddle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Paddle& from);
  void MergeFrom(const Paddle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Paddle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Paddle";
  }
  protected:
  explicit Paddle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arkanoid_2eproto);
    return ::descriptor_table_arkanoid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Paddle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arkanoid_2eproto;
};
// -------------------------------------------------------------------

class Brick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Brick) */ {
 public:
  inline Brick() : Brick(nullptr) {};
  virtual ~Brick();

  Brick(const Brick& from);
  Brick(Brick&& from) noexcept
    : Brick() {
    *this = ::std::move(from);
  }

  inline Brick& operator=(const Brick& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brick& operator=(Brick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brick* internal_default_instance() {
    return reinterpret_cast<const Brick*>(
               &_Brick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Brick& a, Brick& b) {
    a.Swap(&b);
  }
  inline void Swap(Brick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brick* New() const final {
    return CreateMaybeMessage<Brick>(nullptr);
  }

  Brick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brick& from);
  void MergeFrom(const Brick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Brick";
  }
  protected:
  explicit Brick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arkanoid_2eproto);
    return ::descriptor_table_arkanoid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
  };
  // int32 duration = 1;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Brick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arkanoid_2eproto;
};
// -------------------------------------------------------------------

class ElementPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ElementPosition) */ {
 public:
  inline ElementPosition() : ElementPosition(nullptr) {};
  virtual ~ElementPosition();

  ElementPosition(const ElementPosition& from);
  ElementPosition(ElementPosition&& from) noexcept
    : ElementPosition() {
    *this = ::std::move(from);
  }

  inline ElementPosition& operator=(const ElementPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElementPosition& operator=(ElementPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElementPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementPosition* internal_default_instance() {
    return reinterpret_cast<const ElementPosition*>(
               &_ElementPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ElementPosition& a, ElementPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ElementPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElementPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElementPosition* New() const final {
    return CreateMaybeMessage<ElementPosition>(nullptr);
  }

  ElementPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElementPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElementPosition& from);
  void MergeFrom(const ElementPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ElementPosition";
  }
  protected:
  explicit ElementPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arkanoid_2eproto);
    return ::descriptor_table_arkanoid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ElementPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arkanoid_2eproto;
};
// -------------------------------------------------------------------

class GameElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameElement) */ {
 public:
  inline GameElement() : GameElement(nullptr) {};
  virtual ~GameElement();

  GameElement(const GameElement& from);
  GameElement(GameElement&& from) noexcept
    : GameElement() {
    *this = ::std::move(from);
  }

  inline GameElement& operator=(const GameElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameElement& operator=(GameElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameElement& default_instance();

  enum SpecificCase {
    kBall = 5,
    kPaddle = 6,
    kBrick = 7,
    SPECIFIC_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameElement* internal_default_instance() {
    return reinterpret_cast<const GameElement*>(
               &_GameElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameElement& a, GameElement& b) {
    a.Swap(&b);
  }
  inline void Swap(GameElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameElement* New() const final {
    return CreateMaybeMessage<GameElement>(nullptr);
  }

  GameElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameElement& from);
  void MergeFrom(const GameElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameElement";
  }
  protected:
  explicit GameElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arkanoid_2eproto);
    return ::descriptor_table_arkanoid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementPositionFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kBallFieldNumber = 5,
    kPaddleFieldNumber = 6,
    kBrickFieldNumber = 7,
  };
  // .ElementPosition element_position = 3;
  bool has_element_position() const;
  private:
  bool _internal_has_element_position() const;
  public:
  void clear_element_position();
  const ::ElementPosition& element_position() const;
  ::ElementPosition* release_element_position();
  ::ElementPosition* mutable_element_position();
  void set_allocated_element_position(::ElementPosition* element_position);
  private:
  const ::ElementPosition& _internal_element_position() const;
  ::ElementPosition* _internal_mutable_element_position();
  public:
  void unsafe_arena_set_allocated_element_position(
      ::ElementPosition* element_position);
  ::ElementPosition* unsafe_arena_release_element_position();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ElementType type = 2;
  void clear_type();
  ::ElementType type() const;
  void set_type(::ElementType value);
  private:
  ::ElementType _internal_type() const;
  void _internal_set_type(::ElementType value);
  public:

  // .Ball ball = 5;
  bool has_ball() const;
  private:
  bool _internal_has_ball() const;
  public:
  void clear_ball();
  const ::Ball& ball() const;
  ::Ball* release_ball();
  ::Ball* mutable_ball();
  void set_allocated_ball(::Ball* ball);
  private:
  const ::Ball& _internal_ball() const;
  ::Ball* _internal_mutable_ball();
  public:
  void unsafe_arena_set_allocated_ball(
      ::Ball* ball);
  ::Ball* unsafe_arena_release_ball();

  // .Paddle paddle = 6;
  bool has_paddle() const;
  private:
  bool _internal_has_paddle() const;
  public:
  void clear_paddle();
  const ::Paddle& paddle() const;
  ::Paddle* release_paddle();
  ::Paddle* mutable_paddle();
  void set_allocated_paddle(::Paddle* paddle);
  private:
  const ::Paddle& _internal_paddle() const;
  ::Paddle* _internal_mutable_paddle();
  public:
  void unsafe_arena_set_allocated_paddle(
      ::Paddle* paddle);
  ::Paddle* unsafe_arena_release_paddle();

  // .Brick brick = 7;
  bool has_brick() const;
  private:
  bool _internal_has_brick() const;
  public:
  void clear_brick();
  const ::Brick& brick() const;
  ::Brick* release_brick();
  ::Brick* mutable_brick();
  void set_allocated_brick(::Brick* brick);
  private:
  const ::Brick& _internal_brick() const;
  ::Brick* _internal_mutable_brick();
  public:
  void unsafe_arena_set_allocated_brick(
      ::Brick* brick);
  ::Brick* unsafe_arena_release_brick();

  void clear_specific();
  SpecificCase specific_case() const;
  // @@protoc_insertion_point(class_scope:GameElement)
 private:
  class _Internal;
  void set_has_ball();
  void set_has_paddle();
  void set_has_brick();

  inline bool has_specific() const;
  inline void clear_has_specific();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ElementPosition* element_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  union SpecificUnion {
    SpecificUnion() {}
    ::Ball* ball_;
    ::Paddle* paddle_;
    ::Brick* brick_;
  } specific_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_arkanoid_2eproto;
};
// -------------------------------------------------------------------

class GameUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameUpdate) */ {
 public:
  inline GameUpdate() : GameUpdate(nullptr) {};
  virtual ~GameUpdate();

  GameUpdate(const GameUpdate& from);
  GameUpdate(GameUpdate&& from) noexcept
    : GameUpdate() {
    *this = ::std::move(from);
  }

  inline GameUpdate& operator=(const GameUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameUpdate& operator=(GameUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameUpdate* internal_default_instance() {
    return reinterpret_cast<const GameUpdate*>(
               &_GameUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameUpdate& a, GameUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(GameUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameUpdate* New() const final {
    return CreateMaybeMessage<GameUpdate>(nullptr);
  }

  GameUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameUpdate& from);
  void MergeFrom(const GameUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameUpdate";
  }
  protected:
  explicit GameUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arkanoid_2eproto);
    return ::descriptor_table_arkanoid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .GameElement element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::GameElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameElement >*
      mutable_element();
  private:
  const ::GameElement& _internal_element(int index) const;
  ::GameElement* _internal_add_element();
  public:
  const ::GameElement& element(int index) const;
  ::GameElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameElement >&
      element() const;

  // @@protoc_insertion_point(class_scope:GameUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameElement > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arkanoid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ball

// float velocity_x = 1;
inline void Ball::clear_velocity_x() {
  velocity_x_ = 0;
}
inline float Ball::_internal_velocity_x() const {
  return velocity_x_;
}
inline float Ball::velocity_x() const {
  // @@protoc_insertion_point(field_get:Ball.velocity_x)
  return _internal_velocity_x();
}
inline void Ball::_internal_set_velocity_x(float value) {
  
  velocity_x_ = value;
}
inline void Ball::set_velocity_x(float value) {
  _internal_set_velocity_x(value);
  // @@protoc_insertion_point(field_set:Ball.velocity_x)
}

// float velocity_y = 2;
inline void Ball::clear_velocity_y() {
  velocity_y_ = 0;
}
inline float Ball::_internal_velocity_y() const {
  return velocity_y_;
}
inline float Ball::velocity_y() const {
  // @@protoc_insertion_point(field_get:Ball.velocity_y)
  return _internal_velocity_y();
}
inline void Ball::_internal_set_velocity_y(float value) {
  
  velocity_y_ = value;
}
inline void Ball::set_velocity_y(float value) {
  _internal_set_velocity_y(value);
  // @@protoc_insertion_point(field_set:Ball.velocity_y)
}

// -------------------------------------------------------------------

// Paddle

// -------------------------------------------------------------------

// Brick

// int32 duration = 1;
inline void Brick::clear_duration() {
  duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brick::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brick::duration() const {
  // @@protoc_insertion_point(field_get:Brick.duration)
  return _internal_duration();
}
inline void Brick::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_ = value;
}
inline void Brick::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Brick.duration)
}

// -------------------------------------------------------------------

// ElementPosition

// float x = 1;
inline void ElementPosition::clear_x() {
  x_ = 0;
}
inline float ElementPosition::_internal_x() const {
  return x_;
}
inline float ElementPosition::x() const {
  // @@protoc_insertion_point(field_get:ElementPosition.x)
  return _internal_x();
}
inline void ElementPosition::_internal_set_x(float value) {
  
  x_ = value;
}
inline void ElementPosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ElementPosition.x)
}

// float y = 2;
inline void ElementPosition::clear_y() {
  y_ = 0;
}
inline float ElementPosition::_internal_y() const {
  return y_;
}
inline float ElementPosition::y() const {
  // @@protoc_insertion_point(field_get:ElementPosition.y)
  return _internal_y();
}
inline void ElementPosition::_internal_set_y(float value) {
  
  y_ = value;
}
inline void ElementPosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ElementPosition.y)
}

// -------------------------------------------------------------------

// GameElement

// int32 id = 1;
inline void GameElement::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameElement::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameElement::id() const {
  // @@protoc_insertion_point(field_get:GameElement.id)
  return _internal_id();
}
inline void GameElement::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GameElement::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GameElement.id)
}

// .ElementType type = 2;
inline void GameElement::clear_type() {
  type_ = 0;
}
inline ::ElementType GameElement::_internal_type() const {
  return static_cast< ::ElementType >(type_);
}
inline ::ElementType GameElement::type() const {
  // @@protoc_insertion_point(field_get:GameElement.type)
  return _internal_type();
}
inline void GameElement::_internal_set_type(::ElementType value) {
  
  type_ = value;
}
inline void GameElement::set_type(::ElementType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:GameElement.type)
}

// .ElementPosition element_position = 3;
inline bool GameElement::_internal_has_element_position() const {
  return this != internal_default_instance() && element_position_ != nullptr;
}
inline bool GameElement::has_element_position() const {
  return _internal_has_element_position();
}
inline void GameElement::clear_element_position() {
  if (GetArena() == nullptr && element_position_ != nullptr) {
    delete element_position_;
  }
  element_position_ = nullptr;
}
inline const ::ElementPosition& GameElement::_internal_element_position() const {
  const ::ElementPosition* p = element_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ElementPosition*>(
      &::_ElementPosition_default_instance_);
}
inline const ::ElementPosition& GameElement::element_position() const {
  // @@protoc_insertion_point(field_get:GameElement.element_position)
  return _internal_element_position();
}
inline void GameElement::unsafe_arena_set_allocated_element_position(
    ::ElementPosition* element_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(element_position_);
  }
  element_position_ = element_position;
  if (element_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameElement.element_position)
}
inline ::ElementPosition* GameElement::release_element_position() {
  auto temp = unsafe_arena_release_element_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ElementPosition* GameElement::unsafe_arena_release_element_position() {
  // @@protoc_insertion_point(field_release:GameElement.element_position)
  
  ::ElementPosition* temp = element_position_;
  element_position_ = nullptr;
  return temp;
}
inline ::ElementPosition* GameElement::_internal_mutable_element_position() {
  
  if (element_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ElementPosition>(GetArena());
    element_position_ = p;
  }
  return element_position_;
}
inline ::ElementPosition* GameElement::mutable_element_position() {
  // @@protoc_insertion_point(field_mutable:GameElement.element_position)
  return _internal_mutable_element_position();
}
inline void GameElement::set_allocated_element_position(::ElementPosition* element_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete element_position_;
  }
  if (element_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(element_position);
    if (message_arena != submessage_arena) {
      element_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element_position, submessage_arena);
    }
    
  } else {
    
  }
  element_position_ = element_position;
  // @@protoc_insertion_point(field_set_allocated:GameElement.element_position)
}

// .Ball ball = 5;
inline bool GameElement::_internal_has_ball() const {
  return specific_case() == kBall;
}
inline bool GameElement::has_ball() const {
  return _internal_has_ball();
}
inline void GameElement::set_has_ball() {
  _oneof_case_[0] = kBall;
}
inline void GameElement::clear_ball() {
  if (_internal_has_ball()) {
    if (GetArena() == nullptr) {
      delete specific_.ball_;
    }
    clear_has_specific();
  }
}
inline ::Ball* GameElement::release_ball() {
  // @@protoc_insertion_point(field_release:GameElement.ball)
  if (_internal_has_ball()) {
    clear_has_specific();
      ::Ball* temp = specific_.ball_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specific_.ball_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Ball& GameElement::_internal_ball() const {
  return _internal_has_ball()
      ? *specific_.ball_
      : *reinterpret_cast< ::Ball*>(&::_Ball_default_instance_);
}
inline const ::Ball& GameElement::ball() const {
  // @@protoc_insertion_point(field_get:GameElement.ball)
  return _internal_ball();
}
inline ::Ball* GameElement::unsafe_arena_release_ball() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameElement.ball)
  if (_internal_has_ball()) {
    clear_has_specific();
    ::Ball* temp = specific_.ball_;
    specific_.ball_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameElement::unsafe_arena_set_allocated_ball(::Ball* ball) {
  clear_specific();
  if (ball) {
    set_has_ball();
    specific_.ball_ = ball;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameElement.ball)
}
inline ::Ball* GameElement::_internal_mutable_ball() {
  if (!_internal_has_ball()) {
    clear_specific();
    set_has_ball();
    specific_.ball_ = CreateMaybeMessage< ::Ball >(GetArena());
  }
  return specific_.ball_;
}
inline ::Ball* GameElement::mutable_ball() {
  // @@protoc_insertion_point(field_mutable:GameElement.ball)
  return _internal_mutable_ball();
}

// .Paddle paddle = 6;
inline bool GameElement::_internal_has_paddle() const {
  return specific_case() == kPaddle;
}
inline bool GameElement::has_paddle() const {
  return _internal_has_paddle();
}
inline void GameElement::set_has_paddle() {
  _oneof_case_[0] = kPaddle;
}
inline void GameElement::clear_paddle() {
  if (_internal_has_paddle()) {
    if (GetArena() == nullptr) {
      delete specific_.paddle_;
    }
    clear_has_specific();
  }
}
inline ::Paddle* GameElement::release_paddle() {
  // @@protoc_insertion_point(field_release:GameElement.paddle)
  if (_internal_has_paddle()) {
    clear_has_specific();
      ::Paddle* temp = specific_.paddle_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specific_.paddle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Paddle& GameElement::_internal_paddle() const {
  return _internal_has_paddle()
      ? *specific_.paddle_
      : *reinterpret_cast< ::Paddle*>(&::_Paddle_default_instance_);
}
inline const ::Paddle& GameElement::paddle() const {
  // @@protoc_insertion_point(field_get:GameElement.paddle)
  return _internal_paddle();
}
inline ::Paddle* GameElement::unsafe_arena_release_paddle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameElement.paddle)
  if (_internal_has_paddle()) {
    clear_has_specific();
    ::Paddle* temp = specific_.paddle_;
    specific_.paddle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameElement::unsafe_arena_set_allocated_paddle(::Paddle* paddle) {
  clear_specific();
  if (paddle) {
    set_has_paddle();
    specific_.paddle_ = paddle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameElement.paddle)
}
inline ::Paddle* GameElement::_internal_mutable_paddle() {
  if (!_internal_has_paddle()) {
    clear_specific();
    set_has_paddle();
    specific_.paddle_ = CreateMaybeMessage< ::Paddle >(GetArena());
  }
  return specific_.paddle_;
}
inline ::Paddle* GameElement::mutable_paddle() {
  // @@protoc_insertion_point(field_mutable:GameElement.paddle)
  return _internal_mutable_paddle();
}

// .Brick brick = 7;
inline bool GameElement::_internal_has_brick() const {
  return specific_case() == kBrick;
}
inline bool GameElement::has_brick() const {
  return _internal_has_brick();
}
inline void GameElement::set_has_brick() {
  _oneof_case_[0] = kBrick;
}
inline void GameElement::clear_brick() {
  if (_internal_has_brick()) {
    if (GetArena() == nullptr) {
      delete specific_.brick_;
    }
    clear_has_specific();
  }
}
inline ::Brick* GameElement::release_brick() {
  // @@protoc_insertion_point(field_release:GameElement.brick)
  if (_internal_has_brick()) {
    clear_has_specific();
      ::Brick* temp = specific_.brick_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specific_.brick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Brick& GameElement::_internal_brick() const {
  return _internal_has_brick()
      ? *specific_.brick_
      : *reinterpret_cast< ::Brick*>(&::_Brick_default_instance_);
}
inline const ::Brick& GameElement::brick() const {
  // @@protoc_insertion_point(field_get:GameElement.brick)
  return _internal_brick();
}
inline ::Brick* GameElement::unsafe_arena_release_brick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameElement.brick)
  if (_internal_has_brick()) {
    clear_has_specific();
    ::Brick* temp = specific_.brick_;
    specific_.brick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameElement::unsafe_arena_set_allocated_brick(::Brick* brick) {
  clear_specific();
  if (brick) {
    set_has_brick();
    specific_.brick_ = brick;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameElement.brick)
}
inline ::Brick* GameElement::_internal_mutable_brick() {
  if (!_internal_has_brick()) {
    clear_specific();
    set_has_brick();
    specific_.brick_ = CreateMaybeMessage< ::Brick >(GetArena());
  }
  return specific_.brick_;
}
inline ::Brick* GameElement::mutable_brick() {
  // @@protoc_insertion_point(field_mutable:GameElement.brick)
  return _internal_mutable_brick();
}

inline bool GameElement::has_specific() const {
  return specific_case() != SPECIFIC_NOT_SET;
}
inline void GameElement::clear_has_specific() {
  _oneof_case_[0] = SPECIFIC_NOT_SET;
}
inline GameElement::SpecificCase GameElement::specific_case() const {
  return GameElement::SpecificCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GameUpdate

// repeated .GameElement element = 1;
inline int GameUpdate::_internal_element_size() const {
  return element_.size();
}
inline int GameUpdate::element_size() const {
  return _internal_element_size();
}
inline void GameUpdate::clear_element() {
  element_.Clear();
}
inline ::GameElement* GameUpdate::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:GameUpdate.element)
  return element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameElement >*
GameUpdate::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:GameUpdate.element)
  return &element_;
}
inline const ::GameElement& GameUpdate::_internal_element(int index) const {
  return element_.Get(index);
}
inline const ::GameElement& GameUpdate::element(int index) const {
  // @@protoc_insertion_point(field_get:GameUpdate.element)
  return _internal_element(index);
}
inline ::GameElement* GameUpdate::_internal_add_element() {
  return element_.Add();
}
inline ::GameElement* GameUpdate::add_element() {
  // @@protoc_insertion_point(field_add:GameUpdate.element)
  return _internal_add_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameElement >&
GameUpdate::element() const {
  // @@protoc_insertion_point(field_list:GameUpdate.element)
  return element_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ElementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ElementType>() {
  return ::ElementType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_arkanoid_2eproto
